{"version":3,"file":"static/webpack/static/development/pages/index.js.af82b2314bb2eb2e5690.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Head from 'next/head';\nimport * as _ from 'lodash';\n\nlet nec_padding = 100;\nlet max_height = 600;\n\nlet fs = 14;\nlet lh = 1.5;\nlet rlh = 14 * lh;\n\nlet help = true;\nlet maxch = '74ch';\n\nconst Home = () => {\n  let [color, setColor] = useState('light');\n  let dividersr = useRef([119]);\n  let activer = useRef([0]);\n  let keymapr = useRef({});\n  let pivot = useRef(0);\n  let ireadoutr = useRef('readout');\n  let dreadoutr = useRef('readout');\n  let oreadoutr = useRef('readout');\n  let iref = useRef(null);\n  let dref = useRef(null);\n  let rref = useRef(null);\n  let icontainer = useRef(null);\n  let ocontainer = useRef(null);\n  let ow = useRef(null);\n  let oh = useRef(null);\n  let image = useRef(null);\n  let [help, setHelp] = useState(true);\n\n  function KeyTip(letter, color) {\n    return (\n      <span\n        className=\"keytip\"\n        onClick={() => {\n          keymapr.current[letter] = true;\n          keyAction(letter, false);\n          setTimeout(() => {\n            keymapr.current[letter] = false;\n          }, 300);\n        }}\n        style={{\n          outline: color === 'dark' ? 'solid 1px white' : 'solid 1px black',\n          paddingLeft: '0.5ch',\n          paddingRight: '0.5ch',\n          textAlign: 'center',\n          display: 'inline-block',\n          userSelect: 'none',\n          cursor: 'default',\n        }}\n      >\n        {letter === ' ' ? 'spacebar' : letter}\n      </span>\n    );\n  }\n\n  function initCanvas(ref, pw, ph) {\n    let c = ref.current;\n    let ctx = c.getContext('2d');\n\n    let dpr = window.devicePixelRatio || 1;\n    dpr = 1;\n    // cancel dpr because it is getting too weird\n\n    c.width = pw * dpr;\n    c.height = ph * dpr;\n    c.style.width = pw + 'px';\n    c.style.height = ph + 'px';\n  }\n\n  function onPaste(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    for (const item of e.clipboardData.items) {\n      if (item.type.indexOf('image') < 0) {\n        continue;\n      }\n      let file = item.getAsFile();\n      let src = URL.createObjectURL(file);\n      initImage(src);\n    }\n  }\n\n  function onDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    let file = e.dataTransfer.files[0];\n    let filename = file.path ? file.path : file.name ? file.name : '';\n    let src = URL.createObjectURL(file);\n    initImage(src);\n  }\n\n  function onDrag(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'copy';\n  }\n\n  function drawDividers() {\n    let dpr = window.devicePixelRatio || 1;\n    dpr = 1;\n    let dividers = dividersr.current;\n    let active = activer.current;\n    let c = dref.current;\n    let w = c.offsetWidth;\n    let h = c.offsetHeight;\n    let ctx = c.getContext('2d');\n    ctx.clearRect(0, 0, w * dpr, h * dpr);\n    ctx.strokeStyle = '#888';\n    for (let d = 0; d < dividers.length; d++) {\n      let x = dividers[d];\n      if (!active.includes(d)) {\n        ctx.strokeRect(x, 0, 1, h);\n      }\n    }\n    // always draw active on top\n    for (let a = 0; a < active.length; a++) {\n      let act = active[a];\n      ctx.strokeStyle = 'magenta';\n      ctx.strokeRect(dividers[act] * dpr, 0, 1 * dpr, h * dpr);\n    }\n  }\n\n  function setResponseWidth(width) {\n    let ic = iref.current;\n    let ph = ic.offsetHeight;\n\n    initCanvas(rref, width, ph);\n    ocontainer.current.style.width = `calc(${width}px + 4ch)`;\n    respond();\n  }\n\n  function initResponse() {\n    setResponseWidth(iref.current.offsetWidth + 200);\n  }\n\n  function respond() {\n    let dividers = dividersr.current;\n    let dpr = window.devicePixelRatio || 1;\n    dpr = 1;\n    let w = rref.current.offsetWidth;\n\n    let ic = iref.current;\n\n    let iw = ic.offsetWidth;\n    let ih = ic.offsetHeight;\n\n    let ph = ic.offsetHeight;\n\n    let c = rref.current;\n    let ctx = c.getContext('2d');\n\n    let diff = w - iw;\n    let diffw = diff / dividers.length;\n\n    ctx.clearRect(0, 0, w, ph);\n\n    let sorted = dividers.slice();\n    sorted = sorted.sort((a, b) => a - b);\n\n    for (let d = 0; d < sorted.length; d++) {\n      let px = d === 0 ? 0 : sorted[d - 1];\n\n      let dx = sorted[d];\n      // slice\n      ctx.drawImage(\n        ic,\n        px * dpr,\n        0,\n        (dx - px) * dpr,\n        ph * dpr,\n        (px + diffw * d) * dpr,\n        0 * dpr,\n        (dx - px) * dpr,\n        ph * dpr\n      );\n      // extend\n      for (let e = 0; e < Math.ceil(diffw * dpr); e++) {\n        ctx.drawImage(\n          ic,\n          dx * dpr,\n          0,\n          1,\n          ph * dpr,\n          (dx + diffw * d) * dpr + e,\n          0 * dpr,\n          1,\n          ph * dpr\n        );\n      }\n\n      if (d === dividers.length - 1) {\n        ctx.drawImage(\n          ic,\n          dx * dpr,\n          0,\n          (iw - dx) * dpr,\n          ph * dpr,\n          (dx + diffw * (d + 1)) * dpr,\n          0 * dpr,\n          (iw - dx) * dpr,\n          ph * dpr\n        );\n      }\n    }\n\n    let active = activer.current;\n    let dividersa = dividers.map((n, i) => {\n      return {\n        x: n,\n        active: active.includes(i) ? true : false,\n        pivot: pivot.current === i,\n      };\n    });\n    let sorted_d = _.sortBy(dividersa, 'x');\n    let div_string = sorted_d\n      .map(o =>\n        o.active\n          ? o.pivot\n            ? `<span style=\"color: magenta; text-decoration: underline;\">${\n                o.x\n              }</span>`\n            : `<span style=\"color: magenta;\">${o.x}</span>`\n          : o.x\n      )\n      .join(' ');\n    ireadoutr.current.innerHTML = `${iw}x${ph} (original:${ow.current}x${\n      oh.current\n    })`;\n    dreadoutr.current.innerHTML = `${dividers.length}|${diffw.toFixed(\n      2\n    )}| ${div_string}`;\n    oreadoutr.current.innerHTML = `${rref.current.offsetWidth}x${\n      rref.current.offsetHeight\n    }`;\n  }\n\n  function setHeight(height) {\n    let w = window.innerWidth;\n    let h = window.innerHeight;\n\n    let ia = ow.current / oh.current;\n\n    let prev_width = iref.current.offsetWidth;\n    let ph = height;\n\n    let pw = Math.round(ph * ia);\n    initCanvas(iref, pw, ph);\n    initCanvas(dref, pw, ph);\n\n    icontainer.current.style.width = `calc(${pw}px + 4ch)`;\n\n    let dpr = window.devicePixelRatio || 1;\n    dpr = 1;\n    iref.current\n      .getContext('2d')\n      .drawImage(image.current, 0, 0, pw * dpr, ph * dpr);\n\n    // tranlsate dividers\n    for (let d = 0; d < dividersr.current.length; d++) {\n      let x = dividersr.current[d];\n      let new_x = Math.round((x / prev_width) * pw);\n      dividersr.current[d] = new_x;\n    }\n\n    drawDividers();\n  }\n\n  function initImage(src) {\n    if (iref.current !== null) {\n      rref.current.getContext('2d').imageSmoothingEnabled = false;\n\n      let w = window.innerWidth;\n      let h = window.innerHeight;\n\n      let img = new Image();\n      img.onload = () => {\n        let iw = img.width;\n        let ih = img.height;\n        ow.current = iw;\n        oh.current = ih;\n        image.current = img;\n        setHeight(Math.min(ih, max_height));\n        initResponse();\n      };\n      img.src = src;\n    }\n  }\n\n  function getSorted() {\n    let active = activer.current;\n    let to_sort = dividersr.current.map((x, i) => {\n      return { x, a: active.includes(i), oi: i };\n    });\n    let sorted = _.sortBy(to_sort, 'x', 'asc');\n    sorted = sorted.map((o, i) => {\n      return { ...o, si: i };\n    });\n    return sorted;\n  }\n\n  function keyAction(letter, repeat) {\n    let k = keymapr.current;\n    let dividers = dividersr.current;\n    let active = activer.current;\n    let iw = iref.current.offsetWidth;\n\n    let sorted = getSorted();\n    let sortie = sorted.filter(o => o.a);\n\n    let inc = 1;\n    if (k['shift']) inc = 10;\n\n    if (letter === 'b' && !repeat) {\n      setColor(function(prevState) {\n        return prevState === 'light' ? 'dark' : 'light';\n      });\n    } else if (letter === 'w' && !repeat) {\n      let link = document.createElement('a');\n\n      var revokeURL = function() {\n        let me = this;\n        requestAnimationFrame(function() {\n          URL.revokeObjectURL(me.href);\n          me.href = null;\n        });\n        this.removeEventListener('click', revokeURL);\n      };\n\n      rref.current.toBlob(function(blob) {\n        link.setAttribute('download', 'slide.png');\n        link.setAttribute('href', URL.createObjectURL(blob));\n        link.addEventListener('click', revokeURL);\n        link.dispatchEvent(\n          new MouseEvent(`click`, {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n          })\n        );\n      });\n    } else if (letter === '?') {\n      setHelp(prevState => {\n        return !prevState;\n      });\n    } else if (letter === 'o' && !repeat) {\n      let input = document.createElement('input');\n      input.setAttribute('type', 'file');\n      input.dispatchEvent(\n        new MouseEvent(`click`, {\n          bubbles: true,\n          cancelable: true,\n          view: window,\n        })\n      );\n\n      function handleChange(e) {\n        for (const item of this.files) {\n          if (item.type.indexOf('image') < 0) {\n            continue;\n          }\n          let src = URL.createObjectURL(item);\n          initImage(src);\n        }\n        this.removeEventListener('change', handleChange);\n      }\n      input.addEventListener('change', handleChange);\n    } else if (letter === 'h') {\n      let left_a = sortie[0];\n      let new_left_a_x = left_a.x - inc;\n      if (new_left_a_x < 0) {\n        let offsets = sortie.map(o => o.x - left_a.x);\n        for (let a = 0; a < sortie.length; a++) {\n          let act = sortie[a];\n          dividers[act.oi] = offsets[a];\n        }\n      } else {\n        for (let act of sortie) {\n          dividers[act.oi] -= inc;\n        }\n      }\n    } else if (letter === 'l') {\n      let right_a = sortie[sortie.length - 1];\n      let new_right_a_x = right_a.x + inc;\n      if (new_right_a_x > iw - 2) {\n        let offsets = sortie.map(o => o.x - right_a.x - 1);\n        for (let a = 0; a < sortie.length; a++) {\n          let act = sortie[a];\n          dividers[act.oi] = iw + offsets[a];\n        }\n      } else {\n        for (let act of sortie) {\n          dividers[act.oi] += inc;\n        }\n      }\n    } else if (letter === 'f') {\n      let left_a = sortie[0];\n      let right_a = sortie[sortie.length - 1];\n\n      if (k['shift']) {\n        if (left_a.x === dividers[pivot.current]) {\n          // adding\n          if (right_a.si !== dividers.length - 1) {\n            let next_index = sorted[right_a.si + 1].oi;\n            activer.current.push(next_index);\n          }\n        } else {\n          // subtracting\n          activer.current = active.slice(0, -1);\n        }\n      } else {\n        if (active.length > 1) {\n          pivot.current = right_a.oi;\n          activer.current = [right_a.oi];\n        } else {\n          if (right_a.si !== dividers.length - 1) {\n            let next_index = sorted[right_a.si + 1].oi;\n            pivot.current = next_index;\n            activer.current = [next_index];\n          }\n        }\n      }\n    } else if (letter === 'd') {\n      let left_a = sortie[0];\n      let right_a = sortie[sortie.length - 1];\n      if (k['shift']) {\n        if (right_a.x === dividers[pivot.current]) {\n          // adding\n          if (left_a.si !== 0) {\n            let next_index = sorted[left_a.si - 1].oi;\n            activer.current.push(next_index);\n          }\n        } else {\n          // subtracting\n          activer.current = active.slice(0, -1);\n        }\n      } else {\n        if (active.length > 1) {\n          pivot.current = left_a.oi;\n          activer.current = [left_a.oi];\n        } else {\n          if (left_a.si !== 0) {\n            let next_index = sorted[left_a.si - 1].oi;\n            pivot.current = next_index;\n            activer.current = [next_index];\n          }\n        }\n      }\n    } else if (letter === 'a') {\n      let left_a = sortie[0];\n      let right_a = sortie[sortie.length - 1];\n      let iw = iref.current.offsetWidth;\n      let new_x = right_a.x + 5;\n      if (new_x > iw) new_x = iw - 1;\n      dividersr.current.push(new_x);\n      if (k['shift']) {\n        pivot.current = left_a.oi;\n        activer.current.push(dividersr.current.length - 1);\n      } else {\n        pivot.current = dividersr.current.length - 1;\n        activer.current = [dividersr.current.length - 1];\n      }\n    } else if (letter === 'e') {\n      if (active.length > 1) {\n        let left_a = sortie[0];\n        let right_a = sortie[sortie.length - 1];\n\n        let space = right_a.x - left_a.x;\n        let diff = Math.floor(space / (sortie.length - 1));\n\n        for (let s = 0; s < sortie.length; s++) {\n          let o = sortie[s];\n          dividersr.current[o.oi] = left_a.x + diff * s;\n        }\n      }\n    } else if (letter === 'x') {\n      let new_height = iref.current.offsetHeight + inc;\n      setHeight(new_height);\n      if (rref.current.offsetWidth / new_height < ow.current / oh.current) {\n        let new_width = new_height / (ow.current / oh.current);\n        initCanvas(rref, new_width, new_height);\n      } else {\n        initCanvas(rref, rref.current.offsetWidth, new_height);\n      }\n    } else if (letter === 'z') {\n      let new_height = iref.current.offsetHeight - inc;\n      setHeight(new_height);\n      initCanvas(rref, rref.current.offsetWidth, new_height);\n    } else if (letter === 'c') {\n      let new_val = rref.current.offsetWidth - inc;\n      if (new_val >= iref.current.offsetWidth) {\n        setResponseWidth(new_val);\n      } else {\n        setResponseWidth(iref.current.offsetWidth);\n      }\n    } else if (letter === 'v') {\n      let new_val = rref.current.offsetWidth + inc;\n      setResponseWidth(new_val);\n    } else if (letter === 'backspace') {\n      let left_a = sortie[0];\n      let right_a = sortie[sortie.length - 1];\n\n      if (dividers.length > 1) {\n        if (active.length === dividers.length) {\n          // all of them is easy\n          dividersr.current = [left_a.x];\n          activer.current = [0];\n        } else {\n          let to_delete = _.orderBy(sortie, 'oi', 'desc');\n\n          let new_active;\n          let prev_check = sorted[left_a.si - 1];\n          if (prev_check !== undefined) {\n            new_active = prev_check.oi;\n          } else {\n            new_active = sorted[right_a.si + 1].oi;\n          }\n\n          for (let i = 0; i < to_delete.length; i++) {\n            if (to_delete[i].oi < new_active) new_active -= 1;\n            dividersr.current.splice(to_delete[i].oi, 1);\n          }\n\n          activer.current = [new_active];\n          pivot.current = new_active;\n        }\n      }\n    }\n\n    drawDividers();\n    respond();\n  }\n\n  function downHandler(e) {\n    let key = e.key.toLowerCase();\n    keymapr.current[key] = true;\n    keyAction(key, e.repeat);\n  }\n\n  function upHandler(e) {\n    let key = e.key.toLowerCase();\n    keymapr.current[key] = false;\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    window.addEventListener('paste', onPaste, false);\n    window.addEventListener('dragover', onDrag, false);\n    window.addEventListener('drop', onDrop, false);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n      window.removeEventListener('paste', onPaste);\n      window.removeEventListener('dragover', onDrag, false);\n      window.removeEventListener('drop', onDrop, false);\n    };\n  }, []);\n\n  useEffect(() => {\n    // initImage('/lion.jpg');\n    initImage('/grant.png');\n  }, []);\n\n  let readout_style = {\n    fontSize: 14,\n    lineHeight: 1.5,\n    whiteSpace: 'nowrap',\n    overflowX: 'auto',\n    paddingLeft: '2ch',\n    paddingRight: '2ch',\n  };\n\n  let sstyle = {\n    maxWidth: '100%',\n    overflowX: 'auto',\n  };\n\n  return (\n    <div>\n      <style global jsx>{`\n        @font-face {\n          font-family: 'custom';\n          src: url('/IBMPlexMono-Regular.woff2') format('woff2'),\n            url('/IBMPlexMono-Regular.woff') format('woff');\n        }\n        * {\n          box-sizing: border-box;\n        }\n        html {\n          font-family: custom, monospace;\n          font-size: ${fs}px;\n          line-height: ${lh};\n          background: ${color === 'dark' ? '#222' : '#eee'};\n          color: ${color === 'dark' ? '#fff' : '#000'};\n        }\n        body {\n          margin: 0;\n          overflow: auto;\n        }\n        p {\n          margin: 0;\n        }\n        a {\n          color: inherit;\n        }\n        canvas {\n          display: block;\n        }\n        @media (max-width: 800px) {\n          .help {\n            max-height: calc(50vh - ${rlh * 2}px);\n          }\n          .image-container {\n            padding-bottom: 50vh;\n          }\n        }\n      `}</style>\n      <div className=\"image-container\">\n        <div\n          style={{\n            paddingTop: rlh,\n          }}\n        >\n          <div style={sstyle}>\n            <div\n              style={{ paddingLeft: '2ch', paddingRight: '2ch' }}\n              ref={icontainer}\n            >\n              <div style={{ position: 'relative' }}>\n                <canvas ref={iref} />\n                <div\n                  style={{ position: 'absolute', left: 0, top: 0, right: 0 }}\n                >\n                  <canvas ref={dref} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div style={{ ...sstyle, marginTop: rlh / 2, marginBottom: rlh / 2 }}>\n          <div style={readout_style} ref={ireadoutr} />\n          <div style={readout_style} ref={dreadoutr} />\n        </div>\n        <div style={sstyle}>\n          <div\n            style={{\n              paddingLeft: '2ch',\n              paddingRight: '2ch',\n            }}\n            ref={ocontainer}\n          >\n            <canvas ref={rref} />\n          </div>\n        </div>\n\n        <div style={{ ...sstyle, marginTop: rlh / 2, marginBottom: rlh / 2 }}>\n          <div style={readout_style} ref={oreadoutr} />\n        </div>\n      </div>\n      <div\n        className=\"help\"\n        style={{\n          position: 'fixed',\n          outline: color === 'dark' ? 'solid 1px white' : 'solid 1px black',\n          display: help ? 'block' : 'none',\n          maxWidth: `calc(100% - 4ch)`,\n          background:\n            color === 'dark' ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.8)',\n          paddingLeft: '2ch',\n          paddingRight: '2ch',\n          paddingBottom: rlh / 2,\n          paddingTop: rlh / 2,\n          right: '2ch',\n          bottom: rlh,\n          overflowY: 'auto',\n        }}\n      >\n        <div style={{ marginBottom: rlh / 2, maxWidth: maxch }}>\n          Divide and slide-stretch an image using your keyboard.\n        </div>\n        <div style={{ marginBottom: rlh / 4, maxWidth: maxch }}>\n          MOVE DIVIDER\n        </div>\n        <div style={{ marginBottom: rlh / 2, maxWidth: maxch }}>\n          {KeyTip('h', color)} move ←&nbsp; {KeyTip('l', color)} move →&nbsp;\n          hold {KeyTip('shift', color)} to move by 10\n        </div>\n        <div style={{ marginBottom: rlh / 4, maxWidth: maxch }}>\n          SELECT DIVIDER\n        </div>\n        <div style={{ marginBottom: rlh / 2, maxWidth: maxch }}>\n          {KeyTip('d', color)} select ←&nbsp; {KeyTip('f', color)} select\n          →&nbsp; hold {KeyTip('shift', color)} to select multiple dividers\n        </div>\n        <div style={{ marginBottom: rlh / 4, maxWidth: maxch }}>DISTRIBUTE</div>\n        <div style={{ marginBottom: rlh / 2, maxWidth: maxch }}>\n          {KeyTip('e', color)} distribute selected dividers evenly across the\n          selected area\n        </div>\n        <div style={{ marginBottom: rlh / 4, maxWidth: maxch }}>\n          ADD & REMOVE\n        </div>\n        <div style={{ marginBottom: rlh / 2, maxWidth: maxch }}>\n          {KeyTip('a', color)} add divider&nbsp; {KeyTip('backspace', color)}{' '}\n          delete divider\n        </div>\n        <div style={{ marginBottom: rlh / 4, maxWidth: maxch }}>IMAGE</div>\n        <div style={{ marginBottom: rlh / 2, maxWidth: maxch }}>\n          To add an image you can paste, drop, or press {KeyTip('o', color)} to\n          open a file dialog.\n        </div>\n        <div style={{ marginBottom: rlh / 4, maxWidth: maxch }}>IMAGE SIZE</div>\n        <div style={{ marginBottom: rlh / 4, maxWidth: maxch }}>\n          {KeyTip('z', color)} decrease height&nbsp; {KeyTip('x', color)}{' '}\n          increase height\n        </div>\n        <div style={{ marginBottom: rlh / 2, maxWidth: maxch }}>\n          {KeyTip('c', color)} decrease output width&nbsp; {KeyTip('v', color)}{' '}\n          increase output width\n        </div>\n        <div style={{ marginBottom: rlh / 4, maxWidth: maxch }}>SPECIAL</div>\n        <div style={{ marginBottom: rlh / 2 }}>\n          {KeyTip('w', color)} save as png&nbsp; {KeyTip('b', color)}{' '}\n          {color === 'dark' ? 'light bg' : 'dark bg'}&nbsp; {KeyTip('?', color)}{' '}\n          help\n        </div>\n      </div>\n      {help ? null : (\n        <div\n          style={{\n            position: 'fixed',\n            right: '1.5rem',\n            bottom: '1.5rem',\n            background:\n              color === 'dark' ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.8)',\n          }}\n        >\n          {KeyTip('?', color)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AACA;AAkBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAWA;AACA;AAWA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAUA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAWA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AApBA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAiubA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkcA;AACA;AACA;;;;A","sourceRoot":""}